name: Build Chrome Bisect Script

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '30 20 * * 6'

defaults:
  run:
    shell: bash

env:
  OPENSSL_CONFIG_OPTS: no-fips --api=3.0.0
  OPENSSL_INSTALL_PATH: ${{ github.workspace }}/bin/ssl
  OPENSSL_SOURCE_PATH: ${{ github.workspace }}/src/openssl
  PYTHON_INSTALL_PATH: ${{ github.workspace }}/bin/python
  PYTHON_SOURCE_PATH: ${{ github.workspace }}/src/cpython
  distpath: ${{ github.workspace }}/chrome_bisect
  build_ssl: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            jid: 1
          - os: ubuntu-22.04-arm
            jid: 2
          - os: macos-13
            jid: 3
          - os: macos-14
            jid: 4
          - os: windows-2025
            jid: 5
          - os: windows-11-arm
            jid: 6

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.x'
          check-latest: true

      - name: Cache multiple paths
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        id: cache-python-ssl
        with:
          path: |
            bin.tar.xz
            src/cpython
          key: cbisect-${{ matrix.jid }}-20251002

      - name: Untar Cache archive
        if: steps.cache-python-ssl.outputs.cache-hit == 'true'
        run: |
          tar xvvf bin.tar.xz

      - name: MacOS import developer certificates for signing
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@95e84a1a18f2bdbc5c6ab9b7f4429372e4b13a8b # v5.0.3
        with:
          keychain: signing_temp
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        with:
          arch: ${{ runner.arch }}

      - name: Set Env Variables for build
        run: |
          echo "We are running on ${RUNNER_OS}"
          echo "Existing Python Info:"
          python3 -c "import platform; print(platform.machine())"
          which python3
          mkdir -p bin
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            MAKE=make
            MAKEOPT="-j$(sysctl -n hw.logicalcpu)"
            PERL=perl
            echo "MacOS version info:"
            sw_vers -productVersion
            MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)
            echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            MAKE=make
            MAKEOPT="-j$(nproc)"
            PERL=perl
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            MAKE=nmake
            MAKEOPT=""
            PERL="c:\strawberry\perl\bin\perl.exe"
            if [[ "$RUNNER_ARCH" == "X64" ]]; then
              export arch_path="amd64"
            elif [[ "$RUNNER_ARCH" == "ARM64" ]]; then
              export arch_path="arm64"
            fi
            echo "PYTHON=${PYTHON_SOURCE_PATH}/PCbuild/${arch_path}/python.exe" >> $GITHUB_ENV
          fi
          echo "We'll run make with: ${MAKEOPT}"
          echo "MAKE=${MAKE}" >> $GITHUB_ENV
          echo "MAKEOPT=${MAKEOPT}" >> $GITHUB_ENV
          echo "PERL=${PERL}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_PATH}/lib:${PYTHON_INSTALL_PATH}/lib" >> $GITHUB_ENV
          #echo "PATH=${PATH}:${PYTHON_INSTALL_PATH}/scripts" >> $GITHUB_ENV

      - name: Get latest stable OpenSSL source
        if: env.build_ssl == 'true' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          mkdir -vp "${GITHUB_WORKSPACE}/src"
          cd "${GITHUB_WORKSPACE}/src"
          git clone https://github.com/openssl/openssl.git
          cd "${OPENSSL_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list openssl-* | grep -v alpha | grep -v beta | sort -Vr | head -n1)
          echo "Checking out version ${LATEST_STABLE_TAG}"
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_OPENSSL_VERSION=${LATEST_STABLE_TAG:8} # Trim the openssl- prefix
          echo "COMPILED_OPENSSL_VERSION=${COMPILED_OPENSSL_VERSION}" >> $GITHUB_ENV

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@72793074d3c8cdda771dba85f6deafe00623038b #v1.5.2
        if: runner.os == 'Windows' && runner.arch == 'X64' && steps.cache-python-ssl.outputs.cache-hit != 'true'

      - name: Config OpenSSL
        if: env.build_ssl == 'true' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "$OPENSSL_SOURCE_PATH"
          if ([ "$RUNNER_OS" == "Windows" ] && [ "$RUNNER_ARCH" == "ARM64" ]); then
            export CFLAGS=-DNO_INTERLOCKEDOR64
          fi
          # --libdir=lib is needed so Python can find OpenSSL libraries
          "${PERL}" ./Configure --libdir=lib --prefix="${OPENSSL_INSTALL_PATH}" $OPENSSL_CONFIG_OPTS
          
      - name: Rename GNU link on Windows
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: bash
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: env.build_ssl == 'true' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "$OPENSSL_SOURCE_PATH"
          if ([ "$RUNNER_OS" == "Windows" ] && [ "$RUNNER_ARCH" == "ARM64" ]); then
            export CFLAGS=-DNO_INTERLOCKEDOR64
          fi
          $MAKE $MAKEOPT

      - name: Install OpenSSL
        if: env.build_ssl == 'true' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "$OPENSSL_SOURCE_PATH"
          # install_sw saves us ages processing man pages :-)
          $MAKE install_sw

      - name: Run OpenSSL
        if: env.build_ssl == 'true'
        run: |
          "${OPENSSL_INSTALL_PATH}/bin/openssl" version
          file "${OPENSSL_INSTALL_PATH}/bin/openssl"

      - name: Get latest stable Python source
        if: steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          mkdir -vp "${GITHUB_WORKSPACE}/src"
          cd "${GITHUB_WORKSPACE}/src"
          git clone https://github.com/python/cpython.git
          cd "${PYTHON_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list | grep -v a | grep -v rc | grep -v b | sort -Vr | head -n1)
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_PYTHON_VERSION=${LATEST_STABLE_TAG:1} # Trim the "v" prefix
          echo "COMPILED_PYTHON_VERSION=${COMPILED_PYTHON_VERSION}" >> $GITHUB_ENV

      - name: Mac/Linux Configure Python
        if: runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          ./configure --with-openssl="${OPENSSL_INSTALL_PATH}" \
                      --prefix="${PYTHON_INSTALL_PATH}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Windows Get External Python deps
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          PCBuild\get_externals.bat

      - name: Windows overwrite external OpenSSL with local
        if: env.build_ssl == 'true' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          $env:OPENSSL_EXT_PATH = "$(Get-Item externals\openssl-bin-* | Select -exp FullName)\"
          echo "External OpenSSL was downloaded to ${env:OPENSSL_EXT_PATH}"
          Remove-Item -recurse -force "${env:OPENSSL_EXT_PATH}*"
          # Emulate what this script does:
          # https://github.com/python/cpython/blob/main/PCbuild/openssl.vcxproj
          if (${env:RUNNER_ARCH} -eq "X64") {
            $env:ossl_path = "amd64"
          } elseif (${env:RUNNER_ARCH} -eq "ARM64") {
            $env:ossl_path =  "arm64"
          }
          $env:OPENSSL_EXT_TARGET_PATH = "${env:OPENSSL_EXT_PATH}${env:ossl_path}"
          echo "Copying our OpenSSL to ${env:OPENSSL_EXT_TARGET_PATH}"
          mkdir "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          Copy-Item -Path "${env:OPENSSL_SOURCE_PATH}\LICENSE.txt" -Destination "${env:OPENSSL_EXT_TARGET_PATH}\LICENSE"
          cp -v "$env:OPENSSL_INSTALL_PATH\lib\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp -v "$env:OPENSSL_INSTALL_PATH\bin\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp -v "$env:OPENSSL_INSTALL_PATH\include\openssl\*" "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          cp -v "$env:OPENSSL_INSTALL_PATH\include\openssl\applink.c" "${env:OPENSSL_EXT_TARGET_PATH}\include\"
          # We need our custom openssl.props which uses OpenSSL 3 DLL names
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\openssl.props" -Destination PCBuild\ -Verbose

      - name: Windows Install sphinx-build
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          pip install --upgrade pip
          pip install --upgrade sphinx
          sphinx-build --version

      - name: Windows Config/Build Python
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          if (${env:RUNNER_ARCH} -eq "X64") {
            $env:arch = "x64"
            PCBuild\build.bat -c Release -p $env:arch --pgo
          } elseif (${env:RUNNER_ARCH} -eq "ARM64") {
            $env:arch =  "ARM64"
            PCBuild\build.bat -c Release -p $env:arch
          }

      - name: Mac/Linux Build Python
        if: runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          echo "Running: ${MAKE} ${MAKEOPT}"
          $MAKE $MAKEOPT

      - name: Mac/Linux Install Python
        if: runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          $MAKE altinstall
          $MAKE bininstall

      - name: Run Python
        run: |
          "$PYTHON" -V
          "$PYTHON" -c "import ssl; print(f'Using {ssl.OPENSSL_VERSION}')"

      - name: Upgrade pip, wheel, etc
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${PYTHON}" get-pip.py
          "${PYTHON}" -m pip install --upgrade pip
          "${PYTHON}" -m pip install --upgrade wheel
          "${PYTHON}" -m pip install --upgrade setuptools

      - name: Install PyInstaller
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller
          export latest_release=$(git tag --list | grep -v dev | grep -v rc | sort -Vr | head -n1)
          git checkout "${latest_release}"
          # remove pre-compiled bootloaders so we fail if bootloader compile fails
          rm -rvf PyInstaller/bootloader/*-*/*
          cd bootloader
          "${PYTHON}" ./waf all
          "${PYTHON}" -m pip install ..

      - name: Install requirements
        run: |
          "${PYTHON}" -m pip install --user -r requirements.txt
        
      - name: Download bisect script
        run: |
          curl -s "https://chromium.googlesource.com/chromium/src/+/refs/heads/main/tools/bisect-builds.py?format=TEXT" | base64 -d > ./bisect_builds.py
          file ./bisect_builds.py
          "${PYTHON}" ./bisect_builds.py --help

      - name: Download Google CA bundle
        run: curl -o ./roots.pem https://pki.goog/roots.pem

      - name: Set datetime version string
        id: dateversion
        run: |
          export dateversion="$(date  +'%Y%m%d.%H%M%S')"
          echo "Date version: ${dateversion}"
          echo "version = \"${dateversion}\"" > version.py
          cat version.py

      - name: Compile bisect script
        run: |
          export codesign_identity="Jay Lee"
          "${PYTHON}" -m PyInstaller --onedir --clean --noconfirm --codesign-identity "$codesign_identity" --distpath $distpath chrome_bisect.py
          cp roots.pem $distpath/chrome_bisect/

      - name: Run bisect executable
        run: |
          $distpath/chrome_bisect/chrome_bisect --help
          $distpath/chrome_bisect/chrome_bisect --version

      - name: Package binaries
        id: package-binaries
        run: |
          # MacOS and it's old bash causes us this pain...
          export runner_os=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          export runner_arch=$(echo "$RUNNER_ARCH" | tr '[:upper:]' '[:lower:]')
          export archivefile="chrome-bisect-${runner_os}-${runner_arch}.zip"
          echo "archive file will be named ${archivefile}."
          cd "$distpath"
          if [ "$RUNNER_OS" == 'Windows' ]; then
            /c/Program\ Files/7-Zip/7z.exe a -tzip "$archivefile" .
          else
            zip -r "$archivefile" .
          fi
          mv -v "$archivefile" "$GITHUB_WORKSPACE"
          echo "archivefile=${archivefile}" >> "$GITHUB_OUTPUT"

      - name: MacOS send binary for Apple notarization
        if: runner.os == 'macOS'
        env:
          ASP_NOTARIZE: ${{ secrets.ASP_NOTARIZE }}
          FILENAME: ${{ steps.package-binaries.outputs.archivefile }}
        run: |
          filename=
          xcrun notarytool submit --apple-id "jay0lee@gmail.com" --password "$ASP_NOTARIZE" --team-id GZ85H2DRLM "$FILENAME"

      - name: upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: chrome-bisect-${{ matrix.jid }}
          path: |
            ${{ steps.package-binaries.outputs.archivefile }}

      - name: Tar Cache archive
        if: steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          tar cJvvf bin.tar.xz bin/

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        
      - name: Set datetime version string
        id: dateversion
        run: |
          export dateversion="$(date  +'%Y%m%d.%H%M%S')"
          echo "Date version: ${dateversion}"
          echo "dateversion=${dateversion}" >> $GITHUB_OUTPUT

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@d34968c958ae283fe976efed637081b9f9dcf74f # v4.2.0
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            chrome-bisect-*/*.zip

      - name: Publish release
        uses: softprops/action-gh-release@aec2ec56f94eb8180ceec724245f64ef008b89f5 # v2.4.0
        with:
          draft: false
          prerelease: false
          tag_name: "${{ steps.dateversion.outputs.dateversion }}"
          fail_on_unmatched_files: true
          name: "Chrome Bisect ${{ steps.dateversion.outputs.dateversion }}"
          files: |
            chrome-bisect-*/*.zip
